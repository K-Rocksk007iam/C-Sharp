using System;
using System.Collections.Generic;

class Program
{
    static Dictionary<string, Customer> customerDatabase = new Dictionary<string, Customer>();
    static Dictionary<string, User> userDatabase = new Dictionary<string, User>();

    static void Main()
    {
        // Assume user login (you can extend this with proper authentication mechanisms)
        User loggedInUser = UserLogin();

        if (loggedInUser == null)
        {
            Console.WriteLine("Login failed. Exiting...");
            return;
        }

        // Role-based functionality
        switch (loggedInUser.Role)
        {
            case UserRole.AccountClerk:
                AccountClerkFunctionality();
                break;

            case UserRole.Cashier:
                CashierFunctionality();
                break;

            case UserRole.BranchManager:
                BranchManagerFunctionality();
                break;

            default:
                Console.WriteLine("Invalid role. Exiting...");
                break;
        }

        Console.ReadLine(); // To keep the console window open for user review
    }

    static User UserLogin()
    {
        Console.Write("Enter username: ");
        string username = Console.ReadLine();

        Console.Write("Enter password: ");
        string password = Console.ReadLine();

        if (userDatabase.TryGetValue(username, out User user) && user.Password == password)
        {
            Console.WriteLine($"Login successful. Welcome, {user.Role}!");
            return user;
        }

        Console.WriteLine("Invalid credentials. Login failed.");
        return null;
    }

    static void AccountClerkFunctionality()
    {
        // Collect customer details
        Console.WriteLine("Customer Registration Form");

        Console.Write("Enter Name: ");
        string name = Console.ReadLine();

        Console.Write("Enter Date of Birth (YYYY-MM-DD): ");
        DateTime dob = DateTime.Parse(Console.ReadLine());

        Console.Write("Enter Address: ");
        string address = Console.ReadLine();

        Console.Write("Enter Aadhar Number: ");
        string aadharNumber = Console.ReadLine();

        Console.Write("Enter Account Type: ");
        string accountType = Console.ReadLine();

        Console.Write("Enter Branch Name: ");
        string branchName = Console.ReadLine();

        // Generate a unique account number
        string accountNumber = GenerateAccountNumber();

        // Display registration details
        Console.WriteLine("\nRegistration Successful!");
        Console.WriteLine("Name: " + name);
        Console.WriteLine("Date of Birth: " + dob.ToString("yyyy-MM-dd"));
        Console.WriteLine("Address: " + address);
        Console.WriteLine("Aadhar Number: " + aadharNumber);
        Console.WriteLine("Account Type: " + accountType);
        Console.WriteLine("Branch Name: " + branchName);
        Console.WriteLine("Account Number: " + accountNumber);

        // Store customer details in the database
        Customer newCustomer = new Customer(name, dob, address, aadharNumber, accountType, branchName, accountNumber, false);
        customerDatabase.Add(accountNumber, newCustomer);
    }

    static void CashierFunctionality()
    {
        // Assume the Cashier is logged in and has selected a customer
        Console.Write("Enter Customer Account Number: ");
        string customerAccountNumber = Console.ReadLine();

        if (customerDatabase.TryGetValue(customerAccountNumber, out Customer selectedCustomer))
        {
            // Prompt user for opening deposit
            Console.Write("\nEnter Opening Deposit Amount: ");
            decimal openingAmount = decimal.Parse(Console.ReadLine());

            // Process the opening deposit
            bool depositSuccessful = ProcessOpeningDeposit(selectedCustomer, openingAmount);

            // Display deposit status
            if (depositSuccessful)
            {
                Console.WriteLine("Opening Deposit Successful!");
                selectedCustomer.IsConfirmed = true;
            }
            else
            {
                Console.WriteLine("Failed to process opening deposit. Please try again.");
            }
        }
        else
        {
            Console.WriteLine("Customer not found.");
        }
    }

    static void BranchManagerFunctionality()
    {
        // Display customer details to Branch Manager
        Console.WriteLine("\nCustomer List for Branch Manager:");

        foreach (var customer in customerDatabase.Values)
        {
            Console.WriteLine($"Name: {customer.Name}, Account Number: {customer.AccountNumber}, Branch: {customer.BranchName}, Confirmed: {customer.IsConfirmed}");

            if (!customer.IsConfirmed)
            {
                Console.WriteLine("   Remark: PENDING");
            }
        }
    }

    // Function to generate a unique account number (you may implement a more sophisticated logic)
    static string GenerateAccountNumber()
    {
        // In a real-world scenario, you may use a combination of date, branch code, etc.
        return Guid.NewGuid().ToString("N").Substring(0, 10).ToUpper();
    }

    // Function to simulate processing the opening deposit
    static bool ProcessOpeningDeposit(Customer customer, decimal openingAmount)
    {
        // In a real-world scenario, you would update a database or perform other necessary actions
        // Here, we'll just simulate a successful deposit for demonstration purposes
        return openingAmount > 0;
    }
}

enum UserRole
{
    AccountClerk,
    Cashier,
    BranchManager
}

class User
{
    public string Username { get; }
    public string Password { get; }
    public UserRole Role { get; }

    public User(string username, string password, UserRole role)
    {
        Username = username;
        Password = password;
        Role = role;
    }
}

class Customer
{
    public string Name { get; }
    public DateTime DateOfBirth { get; }
    public string Address { get; }
    public string AadharNumber { get; }
    public string AccountType { get; }
    public string BranchName { get; }
    public string AccountNumber { get; }
    public bool IsConfirmed { get; set; }

    public Customer(string name, DateTime dob, string address, string aadharNumber, string accountType, string branchName, string accountNumber, bool isConfirmed)
    {
        Name = name;
        DateOfBirth = dob;
        Address = address;
        AadharNumber = aadharNumber;
        AccountType = accountType;
        BranchName = branchName;
        AccountNumber = accountNumber;
        IsConfirmed = isConfirmed;
    }
}
